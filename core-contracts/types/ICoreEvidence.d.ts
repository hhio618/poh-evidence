/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ICoreEvidenceInterface extends ethers.utils.Interface {
  functions: {
    "evidenceExists(address)": FunctionFragment;
    "getEvidence(address)": FunctionFragment;
    "submitEvidence(address,uint256,bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "evidenceExists",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getEvidence", values: [string]): string;
  encodeFunctionData(
    functionFragment: "submitEvidence",
    values: [string, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "evidenceExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEvidence",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitEvidence",
    data: BytesLike
  ): Result;

  events: {
    "Delegated(address,address)": EventFragment;
    "EvidenceAdded(address,address,uint256,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Delegated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EvidenceAdded"): EventFragment;
}

export class ICoreEvidence extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ICoreEvidenceInterface;

  functions: {
    evidenceExists(user: string, overrides?: CallOverrides): Promise<[boolean]>;

    "evidenceExists(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getEvidence(
      user: string,
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber, string]>;

    "getEvidence(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber, string]>;

    submitEvidence(
      user: string,
      timestamp: BigNumberish,
      evidence: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "submitEvidence(address,uint256,bytes32)"(
      user: string,
      timestamp: BigNumberish,
      evidence: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  evidenceExists(user: string, overrides?: CallOverrides): Promise<boolean>;

  "evidenceExists(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getEvidence(
    user: string,
    overrides?: CallOverrides
  ): Promise<[string, string, BigNumber, string]>;

  "getEvidence(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<[string, string, BigNumber, string]>;

  submitEvidence(
    user: string,
    timestamp: BigNumberish,
    evidence: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "submitEvidence(address,uint256,bytes32)"(
    user: string,
    timestamp: BigNumberish,
    evidence: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    evidenceExists(user: string, overrides?: CallOverrides): Promise<boolean>;

    "evidenceExists(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getEvidence(
      user: string,
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber, string]>;

    "getEvidence(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber, string]>;

    submitEvidence(
      user: string,
      timestamp: BigNumberish,
      evidence: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "submitEvidence(address,uint256,bytes32)"(
      user: string,
      timestamp: BigNumberish,
      evidence: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Delegated(owner: string | null, delegatee: string | null): EventFilter;

    EvidenceAdded(
      user: string | null,
      delegatee: string | null,
      timestamp: null,
      evidence: null
    ): EventFilter;
  };

  estimateGas: {
    evidenceExists(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "evidenceExists(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEvidence(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getEvidence(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    submitEvidence(
      user: string,
      timestamp: BigNumberish,
      evidence: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "submitEvidence(address,uint256,bytes32)"(
      user: string,
      timestamp: BigNumberish,
      evidence: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    evidenceExists(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "evidenceExists(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEvidence(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getEvidence(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    submitEvidence(
      user: string,
      timestamp: BigNumberish,
      evidence: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "submitEvidence(address,uint256,bytes32)"(
      user: string,
      timestamp: BigNumberish,
      evidence: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
