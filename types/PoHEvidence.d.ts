/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface PoHEvidenceInterface extends ethers.utils.Interface {
  functions: {
    "addEvidence(address,address,uint256,bytes32)": FunctionFragment;
    "addEvidenceDelegate(address)": FunctionFragment;
    "delegateeExists(address)": FunctionFragment;
    "evidences(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addEvidence",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addEvidenceDelegate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateeExists",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "evidences", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addEvidence",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addEvidenceDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateeExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "evidences", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Delegated(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Delegated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class PoHEvidence extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: PoHEvidenceInterface;

  functions: {
    addEvidence(
      user: string,
      delegatee: string,
      timestamp: BigNumberish,
      evidence: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addEvidence(address,address,uint256,bytes32)"(
      user: string,
      delegatee: string,
      timestamp: BigNumberish,
      evidence: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addEvidenceDelegate(
      newEvidenceDelegate: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addEvidenceDelegate(address)"(
      newEvidenceDelegate: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    delegateeExists(
      delegatee: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { exists: boolean }>;

    "delegateeExists(address)"(
      delegatee: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { exists: boolean }>;

    evidences(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string] & {
        user: string;
        delegatee: string;
        timestamp: BigNumber;
        evidence: string;
      }
    >;

    "evidences(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string] & {
        user: string;
        delegatee: string;
        timestamp: BigNumber;
        evidence: string;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  addEvidence(
    user: string,
    delegatee: string,
    timestamp: BigNumberish,
    evidence: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addEvidence(address,address,uint256,bytes32)"(
    user: string,
    delegatee: string,
    timestamp: BigNumberish,
    evidence: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addEvidenceDelegate(
    newEvidenceDelegate: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addEvidenceDelegate(address)"(
    newEvidenceDelegate: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  delegateeExists(
    delegatee: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "delegateeExists(address)"(
    delegatee: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  evidences(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, string] & {
      user: string;
      delegatee: string;
      timestamp: BigNumber;
      evidence: string;
    }
  >;

  "evidences(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, string] & {
      user: string;
      delegatee: string;
      timestamp: BigNumber;
      evidence: string;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    addEvidence(
      user: string,
      delegatee: string,
      timestamp: BigNumberish,
      evidence: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "addEvidence(address,address,uint256,bytes32)"(
      user: string,
      delegatee: string,
      timestamp: BigNumberish,
      evidence: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    addEvidenceDelegate(
      newEvidenceDelegate: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addEvidenceDelegate(address)"(
      newEvidenceDelegate: string,
      overrides?: CallOverrides
    ): Promise<void>;

    delegateeExists(
      delegatee: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "delegateeExists(address)"(
      delegatee: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    evidences(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string] & {
        user: string;
        delegatee: string;
        timestamp: BigNumber;
        evidence: string;
      }
    >;

    "evidences(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string] & {
        user: string;
        delegatee: string;
        timestamp: BigNumber;
        evidence: string;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Delegated(owner: null, delegatee: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    addEvidence(
      user: string,
      delegatee: string,
      timestamp: BigNumberish,
      evidence: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addEvidence(address,address,uint256,bytes32)"(
      user: string,
      delegatee: string,
      timestamp: BigNumberish,
      evidence: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addEvidenceDelegate(
      newEvidenceDelegate: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addEvidenceDelegate(address)"(
      newEvidenceDelegate: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    delegateeExists(
      delegatee: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "delegateeExists(address)"(
      delegatee: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    evidences(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "evidences(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addEvidence(
      user: string,
      delegatee: string,
      timestamp: BigNumberish,
      evidence: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addEvidence(address,address,uint256,bytes32)"(
      user: string,
      delegatee: string,
      timestamp: BigNumberish,
      evidence: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addEvidenceDelegate(
      newEvidenceDelegate: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addEvidenceDelegate(address)"(
      newEvidenceDelegate: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    delegateeExists(
      delegatee: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "delegateeExists(address)"(
      delegatee: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    evidences(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "evidences(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
